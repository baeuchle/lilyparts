#(begin
  (define (count-if lst)
    (if (null? lst) 0 (+ (if (car lst) 1 0) (count-if (cdr lst))))
  )
  (define gits (count-if (list hasEins hasZwei hasDrei hasVier)))
  (define oths (count-if (list hasBass hasDrum hasOkta hasElec hasQuer hasSaxo hasSaxb hasMast)))
  (define alls (count-if (list
    (and showEins hasEins)
    (and showZwei hasZwei)
    (and showDrei hasDrei)
    (and showVier hasVier)
    (and showBass hasBass)
    (and showDrum hasDrum)
    (and showOkta hasOkta)
    (and showElec hasElec)
    (and showQuer hasQuer)
    (and showSaxo hasSaxo)
    (and showSaxb hasSaxb)
    (and showMast hasMast)
  )))
  (define showEins (if hasEins showEins #f))
  (define showZwei (if hasZwei showZwei #f))
  (define showDrei (if hasDrei showDrei #f))
  (define showVier (if hasVier showVier #f))
  (define showBass (if hasBass showBass #f))
  (define showDrum (if hasDrum showDrum #f))
  (define showOkta (if hasOkta showOkta #f))
  (define showElec (if hasElec showElec #f))
  (define showQuer (if hasQuer showQuer #f))
  (define showSaxo (if hasSaxo showSaxo #f))
  (define showSaxb (if hasSaxb showSaxb #f))
  (define showMast (if hasMast showMast #f))

  (ly:debug (string-append "Alls: " (number->string alls)))
  (ly:debug (string-append "Gits: " (number->string gits)))
  (ly:debug (string-append "Oths: " (number->string oths)))
  (ly:debug (string-append (if hasEins "hasEins;     " "has no Eins; ") (if showEins "showEins" "show no Eins")))
  (ly:debug (string-append (if hasZwei "hasZwei;     " "has no Zwei; ") (if showZwei "showZwei" "show no Zwei")))
  (ly:debug (string-append (if hasDrei "hasDrei;     " "has no Drei; ") (if showDrei "showDrei" "show no Drei")))
  (ly:debug (string-append (if hasVier "hasVier;     " "has no Vier; ") (if showVier "showVier" "show no Vier")))
  (ly:debug (string-append (if hasBass "hasBass;     " "has no Bass; ") (if showBass "showBass" "show no Bass")))
  (ly:debug (string-append (if hasDrum "hasDrum;     " "has no Drum; ") (if showDrum "showDrum" "show no Drum")))
  (ly:debug (string-append (if hasOkta "hasOkta;     " "has no Okta; ") (if showOkta "showOkta" "show no Okta")))
  (ly:debug (string-append (if hasElec "hasElec;     " "has no Elec; ") (if showElec "showElec" "show no Elec")))
  (ly:debug (string-append (if hasQuer "hasQuer;     " "has no Quer; ") (if showQuer "showQuer" "show no Quer")))
  (ly:debug (string-append (if hasSaxo "hasSaxo;     " "has no Saxo; ") (if showSaxo "showSaxo" "show no Saxo")))
  (ly:debug (string-append (if hasSaxb "hasSaxb;     " "has no Saxb; ") (if showSaxb "showSaxb" "show no Saxb")))
  (ly:debug (string-append (if hasMast "hasMast;     " "has no Mast; ") (if showMast "showMast" "show no Mast")))

  (define (append-if old doit suffix) (if doit (string-append old suffix) old))
  (define instruments "Gitarrenorchester")
  ; if mehr, then whatever comes next is at least the second word and needs a comma before it.
  (define mehr #f)
  (define instruments (append-if instruments (> oths 0) " mit ")) ; no comma at beginning...
  (define instruments (append-if instruments hasBass    "Bass"))
  (define mehr (or hasBass mehr))
  (define instruments (append-if instruments (and hasDrum mehr) ", "))
  (define instruments (append-if instruments hasDrum "Percussion"))
  (define mehr (or hasDrum mehr))
  (define instruments (append-if instruments (and hasOkta mehr) ", "))
  (define instruments (append-if instruments hasOkta "Oktavgitarren"))
  (define mehr (or hasOkta mehr))
  (define instruments (append-if instruments (and hasElec mehr) ", "))
  (define instruments (append-if instruments hasElec "E-Gitarre"))
  (define mehr (or hasElec mehr))
  (define instruments (append-if instruments (and hasQuer mehr) ", "))
  (define instruments (append-if instruments hasQuer "Querflöte"))
  (define mehr (or hasQuer mehr))
  (define someSax (or hasSaxo hasSaxb))
  (define instruments (append-if instruments (and someSax mehr) ", "))
  (define instruments (append-if instruments someSax "Saxophon"))
  (define instruments (append-if instruments (and hasSaxo hasSaxb) "e")) ; plural for multiple Sax
  (define mehr (or someSax mehr))
  (define instruments (append-if instruments (and hasMast mehr) ", "))
  (define instruments (append-if instruments      hasMast       "Klavier"))
  (define instruments (append-if instruments (> (+ oths gits) alls) " (Auszug)"))
  (ly:message (string-append "Instruments: " instruments))

  (define is-part (and showPart (= (+ oths gits) alls)))
  (define auszug (if is-part "Partitur" ""))
  (define auszug (append-if auszug (and (not is-part) showEins) "Git. 1 "))
  (define auszug (append-if auszug (and (not is-part) showZwei) "Git. 2 "))
  (define auszug (append-if auszug (and (not is-part) showDrei) "Git. 3 "))
  (define auszug (append-if auszug (and (not is-part) showVier) "Git. 4 "))
  (define auszug (append-if auszug (and (not is-part) showBass) "Bass "))
  (define auszug (append-if auszug (and (not is-part) showDrum) "Percussion "))
  (define auszug (append-if auszug (and (not is-part) showOkta) "Oktavgitarre "))
  (define auszug (append-if auszug (and (not is-part) showElec) "E-Gitarre "))
  (define auszug (append-if auszug (and (not is-part) showQuer) "Querflöte "))
  (define auszug (append-if auszug (and (not is-part) showSaxo) "Saxophon "))
  (define auszug (append-if auszug (and (not is-part) showSaxb) "Saxophon Ⅱ "))
  (define auszug (append-if auszug (and (not is-part) showMast) "Klavier "))

  (define suffix "")
  (define suffix (append-if suffix makeMidi "_midi"))
  (define suffix (append-if suffix (and showPart (< (+ oths gits) alls)) "_p"))
  (define suffix (append-if suffix (and (not showAlle) showEins) "_1"))
  (define suffix (append-if suffix (and (not showAlle) showZwei) "_2"))
  (define suffix (append-if suffix (and (not showAlle) showDrei) "_3"))
  (define suffix (append-if suffix (and (not showAlle) showVier) "_4"))
  (define suffix (append-if suffix (and (not showAlle) showBass) "_b"))
  (define suffix (append-if suffix (and (not showAlle) showDrum) "_d"))
  (define suffix (append-if suffix (and (not showAlle) showOkta) "_o"))
  (define suffix (append-if suffix (and (not showAlle) showElec) "_e"))
  (define suffix (append-if suffix (and (not showAlle) showQuer) "_q"))
  (define suffix (append-if suffix (and (not showAlle) showSaxo) "_s"))
  (define suffix (append-if suffix (and (not showAlle) showSaxb) "_sb"))
  (define suffix (append-if suffix (and (not showAlle) showMast) "_master"))
  (define suffix (if (> (string-length suffix) 0) (substring suffix 1) suffix))
)
